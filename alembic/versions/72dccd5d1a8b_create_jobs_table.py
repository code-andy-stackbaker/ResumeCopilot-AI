from typing import Sequence, Union
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql # For specific PostgreSQL types like TIMESTAMP WITH TIME ZONE
from pgvector.sqlalchemy import Vector # MODIFIED: Added import for Vector type
from app.config import EMBEDDING_DIMENSION_RECOMMENDER

# revision identifiers, used by Alembic.
revision: str = '72dccd5d1a8b'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - adjusted! ###
    op.create_table('jobs',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('external_job_id', sa.String(length=255), nullable=True),
    sa.Column('title', sa.String(length=500), nullable=False),
    sa.Column('company', sa.String(length=255), nullable=True),
    sa.Column('location', sa.String(length=255), nullable=True),
    sa.Column('job_description_text', sa.TEXT(), nullable=False),
    # MODIFIED: Using the imported Vector type directly
    sa.Column('job_description_embedding', Vector(EMBEDDING_DIMENSION_RECOMMENDER), nullable=True), # Ensure 384 matches your EMBEDDING_DIMENSION_RECOMMENDER
    
    # MODIFIED: Added missing timestamp columns
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), onupdate=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    
    sa.PrimaryKeyConstraint('id')
    )
    # Indexes are good as autogenerated, ensure they match your model's index=True flags
    op.create_index(op.f('ix_jobs_company'), 'jobs', ['company'], unique=False)
    op.create_index(op.f('ix_jobs_external_job_id'), 'jobs', ['external_job_id'], unique=True)
    op.create_index(op.f('ix_jobs_id'), 'jobs', ['id'], unique=False) # Index on PK is usually automatic, but explicit is fine.
    op.create_index(op.f('ix_jobs_location'), 'jobs', ['location'], unique=False)
    op.create_index(op.f('ix_jobs_title'), 'jobs', ['title'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_jobs_title'), table_name='jobs')
    op.drop_index(op.f('ix_jobs_location'), table_name='jobs')
    op.drop_index(op.f('ix_jobs_id'), table_name='jobs')
    op.drop_index(op.f('ix_jobs_external_job_id'), table_name='jobs')
    op.drop_index(op.f('ix_jobs_company'), table_name='jobs')
    op.drop_table('jobs')
    # ### end Alembic commands ###