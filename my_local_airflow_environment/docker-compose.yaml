# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
# ---
# version: '3.9' # Or your preferred compatible version

x-airflow-common: &airflow-common
  build:
    context: ../ # This should point to your LLM_DeepLearning directory
    dockerfile: my_local_airflow_environment/Dockerfile # Path to your Airflow Dockerfile
  env_file:
    - ../.env # Loads environment variables from LLM_DeepLearning/.env
  environment: &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: CeleryExecutor
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
    AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
    # Add any other AIRFLOW__... environment variables you need consistently across services
    # For example, AIRFLOW__CORE__LOAD_EXAMPLES: "False"
    # AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: "True" # or "False"
  volumes:
    - ${AIRFLOW_PROJ_DIR:-.}/dags:/opt/airflow/dags
    - ${AIRFLOW_PROJ_DIR:-.}/logs:/opt/airflow/logs
    - ${AIRFLOW_PROJ_DIR:-.}/config:/opt/airflow/config
    - ${AIRFLOW_PROJ_DIR:-.}/plugins:/opt/airflow/plugins
    - ${AIRFLOW_PROJ_DIR:-.}/../app:/opt/app # Mounts LLM_DeepLearning/app to /opt/app
    - ${AIRFLOW_PROJ_DIR:-.}/../utils:/opt/utils # Mounts LLM_DeepLearning/utils to /opt/utils
  user: "${AIRFLOW_UID:-50000}:0"
  # 'depends_on' common block removed from here; will be explicit in each service.

services:
  postgres: # This is Airflow's metadata database
    image: ankane/pgvector:latest # Using pgvector image here is fine; Airflow won't use the extension for its metadata
    environment:
      POSTGRES_USER: airflow # MUST BE 'airflow'
      POSTGRES_PASSWORD: airflow # MUST BE 'airflow'
      POSTGRES_DB: airflow # MUST BE 'airflow'
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"] # Correctly checks for user 'airflow'
      interval: 10s
      retries: 5
      start_period: 5s
    restart: always
    networks:
      - default # Airflow's internal network
      - llm_deeplearning_network # If you need other services on this shared network to potentially access it (though generally not needed for Airflow's metadata DB)

  redis:
    image: redis:7.2-bookworm
    expose:
      - "6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 30s
      retries: 50
      start_period: 30s
    restart: always
    networks:
      - default

  airflow-webserver:
    <<: *airflow-common
    command: webserver
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 30s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
      airflow-init:
        condition: service_completed_successfully
    networks:
      - default

  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    healthcheck:
      test:
        [
          "CMD",
          "airflow",
          "jobs",
          "check",
          "--job-type",
          "SchedulerJob",
          "--limit",
          "1",
        ]
      interval: 30s
      timeout: 30s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
      airflow-init:
        condition: service_completed_successfully
    networks:
      - default

  airflow-worker:
    <<: *airflow-common
    command: celery worker
    healthcheck:
      test:
        [
          "CMD",
          "airflow",
          "jobs",
          "check",
          "--job-type",
          "WorkerJob",
          "--limit",
          "1",
        ]
      interval: 30s
      timeout: 30s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
      airflow-init:
        condition: service_completed_successfully
    networks:
      - default
      - llm_deeplearning_network # If workers need access to this network

  airflow-triggerer:
    <<: *airflow-common
    command: triggerer
    healthcheck:
      test:
        [
          "CMD",
          "airflow",
          "jobs",
          "check",
          "--job-type",
          "TriggererJob",
          "--limit",
          "1",
        ]
      interval: 30s
      timeout: 30s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
      airflow-init:
        condition: service_completed_successfully
    networks:
      - default

  airflow-init:
    <<: *airflow-common # This includes the default /entrypoint
    # Add this command to ensure it exits cleanly after init
    command: | # <--- Use a literal block scalar here
      bash -c 'echo "Airflow init process: DB migrations and user creation complete (if enabled via ENV VARS). Exiting." && exit 0'
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_MIGRATE: "true"
      _AIRFLOW_WWW_USER_CREATE: "true"
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
      # Add other _AIRFLOW_WWW_USER... vars if you use them
    user: "0:0" # Runs as root
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    networks:
      - default

  airflow-cli:
    <<: *airflow-common
    command: bash
    tty: true
    stdin_open: true
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    networks:
      - default
      - llm_deeplearning_network # If CLI needs access to this network

  flower:
    <<: *airflow-common
    command: celery flower
    ports:
      - "5555:5555"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:5555/"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
      airflow-init:
        condition: service_completed_successfully
    networks:
      - default

volumes:
  postgres-db-volume:

networks:
  default:
    driver: bridge
  llm_deeplearning_network:
    external: true
    name: llm_deeplearning_network # Ensure this network is created manually: docker network create llm_deeplearning_network
